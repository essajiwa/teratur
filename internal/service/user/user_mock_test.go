// Code generated by MockGen. DO NOT EDIT.
// Source: user.go

// Package user is a generated GoMock package.
package user

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDataLayer is a mock of DataLayer interface
type MockDataLayer struct {
	ctrl     *gomock.Controller
	recorder *MockDataLayerMockRecorder
}

// MockDataLayerMockRecorder is the mock recorder for MockDataLayer
type MockDataLayerMockRecorder struct {
	mock *MockDataLayer
}

// NewMockDataLayer creates a new mock instance
func NewMockDataLayer(ctrl *gomock.Controller) *MockDataLayer {
	mock := &MockDataLayer{ctrl: ctrl}
	mock.recorder = &MockDataLayerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDataLayer) EXPECT() *MockDataLayerMockRecorder {
	return m.recorder
}

// GetUserByID mocks base method
func (m *MockDataLayer) GetUserByID(ctx context.Context, userID int64) (User, error) {
	ret := m.ctrl.Call(m, "GetUserByID", ctx, userID)
	ret0, _ := ret[0].(User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID
func (mr *MockDataLayerMockRecorder) GetUserByID(ctx, userID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockDataLayer)(nil).GetUserByID), ctx, userID)
}

// MockShopService is a mock of ShopService interface
type MockShopService struct {
	ctrl     *gomock.Controller
	recorder *MockShopServiceMockRecorder
}

// MockShopServiceMockRecorder is the mock recorder for MockShopService
type MockShopServiceMockRecorder struct {
	mock *MockShopService
}

// NewMockShopService creates a new mock instance
func NewMockShopService(ctrl *gomock.Controller) *MockShopService {
	mock := &MockShopService{ctrl: ctrl}
	mock.recorder = &MockShopServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockShopService) EXPECT() *MockShopServiceMockRecorder {
	return m.recorder
}

// GetShopName mocks base method
func (m *MockShopService) GetShopName(ctx context.Context, shopID int64) (string, error) {
	ret := m.ctrl.Call(m, "GetShopName", ctx, shopID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShopName indicates an expected call of GetShopName
func (mr *MockShopServiceMockRecorder) GetShopName(ctx, shopID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShopName", reflect.TypeOf((*MockShopService)(nil).GetShopName), ctx, shopID)
}
